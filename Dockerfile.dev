FROM python:3.10.13-slim

WORKDIR /app

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FASTAPI_ENV=development \
    PYTHONPATH=/app

# Install dependencies including curl for healthcheck and MariaDB client for DB connection
RUN apt-get update && apt-get install -y \
    curl \
    default-libmysqlclient-dev \
    build-essential \
    default-mysql-client \
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements files
COPY packages/backend/requirements.txt packages/backend/requirements-dev.txt ./
RUN pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt

# Copy backend project
COPY packages/backend/ /app/

# Install the project in development mode
RUN pip install -e .

# Create a symlink for the side_quest_py module to ensure imports work correctly
RUN mkdir -p /app/side_quest_py && \
    ln -sf /app/src/side_quest_py/* /app/side_quest_py/

# Create entrypoint script
RUN echo '#!/bin/bash\nset -e\n\necho "Waiting for 5 seconds before starting database operations..."\nsleep 5\n\necho "Setting up the database..."\necho "Environment: $FASTAPI_ENV"\necho "Database URL: $DATABASE_URL"\n\n# Create instance directory if it does not exist\nmkdir -p /app/instance\n\n# Wait for MariaDB to be ready\necho "Waiting for MariaDB to be ready..."\n\nfor i in {1..60}; do\n    if mysqladmin ping -h mariadb -u side_quest -p${DB_PASSWORD:-side_quest_password} --silent; then\n        echo "MariaDB is ready!"\n        break\n    fi\n    echo "Waiting for MariaDB... ($i/60)"\n    sleep 2\ndone\n\n# Wait for RabbitMQ to be ready\necho "Waiting for RabbitMQ to be ready..."\nfor i in {1..30}; do\n    if curl -s -u ${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest} http://rabbitmq:15672/api/overview > /dev/null; then\n        echo "RabbitMQ is ready!"\n        break\n    fi\n    echo "Waiting for RabbitMQ... ($i/30)"\n    sleep 2\ndone\n\n# Initialize the database if needed\nif [ -f /app/alembic.ini ]; then\n    echo "Running database migrations with Alembic..."\n    cd /app && python scripts/db/migrate_db.py\nelse\n    echo "No alembic.ini found, initializing database directly..."\n    cd /app && python scripts/db/init_db.py\nfi\n\n# Check if we need to seed the database\nif [ "$SEED_DB" = "true" ]; then\n    echo "Seeding the database..."\n    cd /app && python scripts/db/seed_db.py\nfi\n\necho "Database setup complete!"\n\n# Start the application\nif [ "$FASTAPI_ENV" = "development" ]; then\n    echo "Starting uvicorn development server..."\n    cd /app && exec uvicorn src.main:app --host 0.0.0.0 --port 5000 --reload\nelse\n    echo "Starting gunicorn production server..."\n    cd /app && exec gunicorn -c gunicorn.conf.py src.main:app\nfi' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh

# Create non-root user for development
RUN groupadd -r appuser && useradd -r -g appuser -d /app appuser \
    && chown -R appuser:appuser /app

# Switch to non-root user for better security
USER appuser

# Expose port
EXPOSE 5000

# Use the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]

# Add health check
HEALTHCHECK --interval=10s --timeout=5s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1
